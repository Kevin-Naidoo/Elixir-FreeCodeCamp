# Lists and Maps

## Lists within functions

Lists in the scope of recursion. Linked lists have the element and pointer to the next element in the list. Linked lists are dynamic meaning adding and deleting of elements in the list is possible. The last link of the list points to null.

```elixir
list = ["a", "b"]
```

```elixir
[h | t] = list
t
```

```elixir
list = ["a"]
[h | t] = list
t
```

**Summing a list:**

<!-- livebook:{"break_markdown":true} -->

**How to document code example:**

*@moduledoc """*

*Function Summary:<br>*
*1. sum<br>*
*"""*

*@doc """<br>*
*Returns the sum of numbers in a list.<br>*
*"""*

*@spec sum(list(number()), integer()) :: number()*

```elixir
defmodule Lists do
  @moduledoc """

  Function Summary:
  1. sum
  """

  @doc """
  Returns the sum of numbers in a list.
  """
  @spec sum(list(number())) :: number()
  def sum(num, acc \\ 0)

  def sum([], acc) do
    acc
  end

  @spec sum(list(number()), integer()) :: number()
  def sum([h | t], acc) do
    sum(t, acc + h)
  end
end
```

**Default case-> Empty list returns 0**.

```elixir
sum_list = Lists.sum([])
```

**List parameter with default accumulator set to 0**.

```elixir
sum_list = Lists.sum([1, 2, 3])
```

**List summed with an accumulator set to 5, 5+6 = 11**.

```elixir
sum_list = Lists.sum([1, 2, 3], 5)
```

**Reverse List**

<!-- livebook:{"break_markdown":true} -->

Since the list can contain any element, we use the keyword **any()** when writing the function specification. Here the function does the following:

* A list is taken in.
* The list is split into head and tail
* The head is removed and added to the accumulator list
* The tail of each list is called recursively until the **Base Case** i.e. reverse([], acc) is met, which is an empty list.
* Remember the tail of a list containing one element will return an empty list.
* Adding the head in front of the accumulator list takes **0(1)** time instead of adding to the back of the list which takes linear **0(n)** time.

```elixir
defmodule ReverseList do
  @spec reverse([any()], [any()]) :: [any()]
  def reverse(elements, acc \\ [])

  def reverse([], acc) do
    acc
  end

  def reverse([h | t], acc) do
    reverse(t, [h | acc])
  end
end
```

```elixir
reverse_list = ReverseList.reverse([1, 2, 3])
```

```elixir
reverse_list = ReverseList.reverse([1, 2, 3], [5])
```

**Inline functions** can be defined as:<br>
Example:<br>
iex> double = fn x -> x * 2 end <br>

<br />

To use it:<br>
iex> double.(2)<br>
iex> 4

<!-- livebook:{"break_markdown":true} -->

**Maps**<br>

* Applies a transformation to each element in a list. <br>

```elixir
defmodule Map_func do
  @spec map([any()], (any() -> any()), [any()]) :: [any()]
  def map(elements, func, acc \\ [])

  def map([], _, acc) do
    acc
  end

  def map([h | t], func, acc) do
    map(t, func, [func.(h) | acc])
  end
end
```

```elixir
map_list = Map_func.map([1, 2, 3, 4], fn x -> x * 2 end)
```

The **Map_func** is transforming each element in the list by the function.

* **func:** fn x -> x * 2 : This multiplies each element by 2.
* The returned list however is being accumulated in reverse. This is because we are adding to the front of the accumulator list.
* Lets try correct this using piping

```elixir
map_list = Map_func.map([1, 2, 3, 4], fn x -> x * 2 end) |> ReverseList.reverse()
```

**Piping** is a powerful way of using the result of one function as an input into another, thus reducing the number of variables used in between and nested statements.<br>
The **ReverseList** function from the previous section is used to reverse the numbers.<br>
Elixir has a built in function to reverse lists i.e. **Enum.reverse()**.

```elixir
double = fn x -> x * 2 end
map_list_2 = Map_func.map([1, 2, 3, 4], double)
```

```elixir
map_list_2 = Enum.reverse(map_list_2)
```

Incorporating the created **ReverseList** function into the **Map_func** below:

```elixir
defmodule Map_func2 do
  @spec map([any()], (any() -> any()), [any()]) :: [any()]
  def map(elements, func, acc \\ [])

  def map([], _, acc) do
    ReverseList.reverse(acc)
  end

  def map([h | t], func, acc) do
    map(t, func, [func.(h) | acc])
  end
end
```

Piping the list into the map function then inputting the transformation.

```elixir
map_list = [1, 2, 3, 4] |> Map_func2.map(fn x -> x * 3 end)
```
