# API - Application Programming Interface

## What is an API?

It's a set of rules and protocols that allows different software applications to communicate with each other. Think of it as a menu in a restaurant. You, the customer, have a list of dishes you can order, prepared by the kitchen. The waiter (API) takes your request to the kitchen and brings back the dish you ordered. In this analogy:

* You are the user.
* The order represents the request.
* The kitchen is the system or application that processes the request.
* The dish that is served to you is the response.
* In a technical context, when you use an app on your phone to check the weather, the app sends a request to a server via an API.
* The server processes the request, retrieves the data, and sends it back to your app, which then displays the weather to you.

## Why are APIs important?

* Interoperability: APIs allow different software systems, which might have been developed independently and possibly in entirely different programming languages, to work together.
* Modularity: Systems can be built modularly, with different components interacting through well-defined APIs. This makes development, scaling, and troubleshooting easier.
* Security: Instead of giving direct access to databases or core systems, APIs allow controlled access, exposing only what's necessary.
* Efficiency: APIs can provide a standardized way to provide and receive data, which can lead to faster development and integration times.
* Economic Value: Companies often monetize their data and services through APIs. For instance, cloud providers offer a plethora of services accessed primarily through APIs.

## Different types of APIs

* REST (Representational State Transfer): REST is an architectural style for distributed systems. RESTful APIs use HTTP requests to perform CRUD (Create, Read, Update, Delete) operations on resources, which are represented as URLs.

* GraphQL: Developed by Facebook, GraphQL is a query language for APIs. Instead of having multiple endpoints, GraphQL APIs typically have a single endpoint that can interpret and respond to complex queries, allowing clients to request only the data they need.

* SOAP (Simple Object Access Protocol): A protocol, primarily used for web services. It's known for its robustness and has built-in error handling. However, it's considered heavier than REST.

* WebSockets: Unlike the request-response model of REST and GraphQL, WebSockets allow a continuous two-way communication between the client and server. It's useful for applications that require real-time functionality.

* gRPC: Developed by Google, gRPC is a high-performance, open-source framework that uses HTTP/2 for transport and Protocol Buffers as the interface description language.

## Rest API and OpenAPI

What is OpenAPI?

* The OpenAPI Specification:
  * OpenAPI file -YAML/JSON - Describes what an API/service can do
  * Standardised format - Readable
  * REST API Description of  - Resources, Endpoints, Operations, Parameters, Authentication/Authorisation
  * Guidance - Allows use of service
  * Allows extension of API w/tooling

<!-- livebook:{"break_markdown":true} -->

REST API Specification:

* Basic REST API Info
* Description of API Request
* Description of API Response
* Example Response

## Better API Design with OpenAPI -Marsh Gardiner

OpenAPI 3.0 Released 2017<br>
Maintained on Github<br>

**Google** does not use APIs, they have things in binary format due to scalability. gRPC can be expressed as JSON and that can be translated to Open API.

## The API Lifecycle with OpenAPI

**Build**

* Model, Develop, Document, Test<br>

**Use**

* Publish API, Monetize, Access Control, Data Access, Analyze, Deploy

**Run**

* Update/Iterate, Threat Protection, Real Time Monitoring, Maintain Availability, Scale Traffic

## Specifications

* Specs drive documentation
* Specs can inform implementations - backend code
* Specs can drive mocks - build up client examples (mock-ups)
* Specs can also power:
  * Test generation
  * Traffic classification
  * Runtime validation
  * SDK generation
  * Server-side code
* Specs improve the API design process

<!-- livebook:{"break_markdown":true} -->

The API's job is to make the developer as succesful as possible. The orientation for APIs is to think about design choices from the application developer's point of view.

## Better API Design with OpenAPI

1. Invest in API design
2. Leverage specifications in the lifecycle
3. Work with OpenAPI's opinions

## OAS - OpenAPI Specification

OAS (formerly known as Swagger) is a specification for building APIs. OAS defines a standard, language-agnostic interface to RESTful APIs. Allows both humans and computers to understand the capabilities of a service without accessing its source code or seeing further documentation.

## Major Components

* OpenAPI Object: The root document object of the OAS document.
* Info Object: Provides metadata about the API like title, version, and other details.
* Paths Object: Defines the available paths and operations for the API.
* Components Object: A set of reusable objects for different aspects of the OAS.
* Can include schemas (like JSON schemas for request and response bodies), parameters, responses, examples, request bodies, headers, security schemes, links, callbacks, and more.

## Building a REST API with Elixir and Phoenix

Elixir and Phoenix to use for a project. Here, we are going to create a REST API which delivers users information to a Postgres database.

The API will serve user information under /api/users, with GET, PUT, POST, DELETE requests.

To do this, we need to create database schema with required fields that are stored in the database:

1. `id` → **Primary key in the table.**
2. `name` → **String contains user name.**
3. `email` → **Email field, it should be unique.**
4. `role` → **User role.**
5. `address` → **User address.**
